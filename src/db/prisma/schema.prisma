// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Flow {
  /// A totally unique ID that does not change.
  /// It's hexadecimal.
  snowflake         String       @id
  /// The double-slash-prefixed Flow ID.
  id                String       @unique
  name              String
  description       String?
  tagline           String?
  avatarUrl         String?
  bannerUrl         String?
  publicPermissions Json
  joinedPermissions Json
  //badges FlowBadge
  parent            Flow?        @relation("FlowToParent", fields: [parentId], references: [id])
  parentId          String?
  children          Flow[]       @relation("FlowToParent")
  /// The snowflake of the Flow's owner user.
  owner             String
  /// The user that owns the Flow,
  /// IF AND ONLY IF it corresponds to a user.
  /// User-created flows WILL NOT have this set.
  ownerUser         User?
  //members FlowMember[]
  following         Flow[]       @relation("FollowingFlows")
  followedBy        Flow[]       @relation("FollowingFlows")
  displayFlags      String[]
  /// Content posted in the Flow.
  content           Content[]    @relation("ContentToFlow")
  /// Content posted BY the Flow.
  authoredContent   Content[]    @relation("ContentToAuthorFlow") @ignore
  members           FlowMember[] @relation("MemberOfFlow")
  memberOf          FlowMember[] @relation("FlowToMember")
}

model FlowMember {
  // ===   BODY   === //
  /// The state of the member. `left` should become `null` when returning membership states for other people.
  state       MembershipState?
  /// A `FlowPermissions` value.
  permissions Json
  /// Whether this member is the owner of the Flow.
  owner       Boolean          @default(false)

  // === METADATA === //
  /// The Flow that this member is a member of.
  flow     Flow   @relation("MemberOfFlow", fields: [flowId], references: [snowflake])
  flowId   String
  /// The Flow that joined `flow`.
  member   Flow   @relation("FlowToMember", fields: [memberId], references: [snowflake])
  memberId String
  @@id(fields: [flowId, memberId])
}

enum MembershipState {
  JOINED
  KICKED
  BANNED
  LEFT
}

model User {
  snowflake         String   @id
  id                String   @unique
  username          String   @unique
  password          String
  /// The content IDs of authorized apps.
  /// Used to deny access to an entire client
  /// at once.
  /// Might make this a refresh token based approach
  /// in the near future.
  authorizedAppCIDs String[]
  flow              Flow     @relation(fields: [id], references: [id])
}

model Content {
  // ===   BODY   === //
  /// The text of this Content.
  text        String?
  /// The original post of this Content, if it was Forwarded.
  origin      Content?     @relation("ContentToOrigin", fields: [originId], references: [snowflake])
  originId    String?      @ignore
  attachments Attachment[]

  // === METADATA === //
  /// A unique identifier for this Content.
  snowflake       String    @id
  /// Whether or not the Content is pinned.
  pinned          Boolean   @default(false)
  /// The author of this Content.
  author          Flow?     @relation("ContentToAuthorFlow", fields: [authorId], references: [snowflake], onDelete: SetNull)
  authorId        String
  /// The Flow this Content was posted in.
  /// This is how Content is found.
  inFlow          Flow      @relation("ContentToFlow", fields: [inFlowId], references: [snowflake], onDelete: Cascade)
  inFlowId        String
  /// Whether to show `inFlow` as the `author` in the API.
  anonymous       Boolean   @default(false)
  /// The time this was posted at. This should never be changed.
  timestamp       DateTime  @default(now())
  /// The time of the last edit to this Content. This should change with every `updateContent` call.
  editedTimestamp DateTime?
  forwardedBy     Content[] @relation("ContentToOrigin") @ignore
}

model Attachment {
  /// The filename that the Attachment had when it was uploaded.
  filename            String
  /// The hash and extension of the optimized file.
  /// Optimization is done with a tool like imagemagick or ffmpeg.
  /// If available, this is the only hash the user should ever see.
  optimized_file      String?
  /// The hash and extension of the original file.
  /// This file is not optimized and may not be available
  /// when an optimized version is.
  /// The user should not see this hash unless the file could not
  /// be optimized.
  original_file       String?
  /// The MIME type for the file.
  original_mime_type  String?
  /// The MIME type of the optimized file.
  /// Sometimes file optimizations will convert to a more optimized
  /// or more widely available format. In those cases, this is the MIME
  /// type for the format.
  optimized_mime_type String?
  /// The index of the storage configuration in config.yaml.
  index               Int
  /// The internal ID of the user who uploaded this file.
  user                String
  /// If applicable, the Application that uploaded this file
  /// on the user's behalf. This is used for moderation purposes only.
  app                 String?
  /// The public ID of the exact attachment.
  snowflake           String    @id
  content             Content[]
}

/// Used by the developers API
model Application {
  /// A unique ID for the application.
  snowflake     String          @id
  /// The name of the app, shown in the dashboard and to users.
  name          String
  /// The snowflake of the owner (user)
  owner         String
  /// A URL for the app's avatar, currently only shown in the dashboard
  avatar_url    String?
  /// The application type.
  type          ApplicationType @default(CLIENT)
  /// The current Client ID for the application.
  client_id     String          @unique
  /// Redirect URIs set by the app. These have to match
  /// when using redirect-based authentication.
  redirect_uris String[]
}

model SystemConfig {
  singleton Int  @id @default(0)
  auth      Json
}

enum ApplicationType {
  CLIENT
  BOT
}
