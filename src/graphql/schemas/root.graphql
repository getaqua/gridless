# ==========
# Procedures
# ==========
type Query {
    """
    Get the logged-in user.f"{info.context.host}//{flow.get('id','')}"
    """
    getMe: ThisUser
    """
    Get a Flow. Returns null/None if it doesn't exist,
    or if you don't have permission to access it.
    """
    getFlow(id: String!): Flow
    """
    System information about the gridless server.
    """
    getSystemInfo: SystemInfo!
    # """
    # Get Content. Returns null if it doesn't exist,
    # or if you don't have read permission in the Flow
    # this Content was posted in.
    # """
    # getContent(id: String!): Content
    """Get a list of the most recent Content published by
    Flows you follow or subscribe to."""
    getFollowedContent(limit: Int): [Content!]
    """Get a list of the Flows you follow or subscribe to."""
    getFollowedFlows: [Flow!]
    """Get a list of the Flows you are a member of."""
    getJoinedFlows: [Flow!]
}
type Mutation {
    """Creates a Flow, returning null if it fails
    and the new Flow if it succeeds."""
    createFlow(flow: NewFlow, parentId: String): Flow
    """Updates a Flow, returning null if it fails
    and the updated Flow if it succeeds."""
    updateFlow(id: String!, data: PatchedFlow!): Flow
    """Joins a Flow, returning null if it fails 
    and the joined Flow if it succeeds."""
    joinFlow(id: String!, inviteCode: String): Flow
    """Deletes a Flow, returning false if it fails
    and true if it succeeds."""
    deleteFlow(id: String!): Boolean!
    """Leaves a Flow, returning false if it fails
    and true if it succeeds."""
    leaveFlow(id: String!): Boolean!
    """Follow or subscribe to a Flow, returning false if it fails
    and true if it succeeds."""
    followFlow(id: String!): Boolean!
    """Unfollow or unsubscribe to a Flow, returning false if it fails
    and true if it succeeds."""
    unfollowFlow(id: String!): Boolean!
    """Posts Content to a Flow, returning null if it fails
    and the new Content if it succeeds."""
    postContent(to: String!, data: NewContent): Content
    """Edits given Content by its snowflake, returning null if it fails
    and the updated Content if it succeeds."""
    updateContent(id: String!, data: EditedContent): Content
    """Deletes Content, returning false if it fails
    and true if it succeeds."""
    deleteContent(snowflake: String!): Boolean!
}

# ================
# Basic primitives
# ================
"""
FlowEntities are a meta-type that groups Flows and Users,
since Aqua considers users a special type of Flow.
"""
interface FlowEntity {
    name: String!
    id: ID!
    alternative_ids: [String!]!
}
"""
A Room is a collection of Members (usually identical to its parent Flow)
and Messages, along with access controls. Rooms are primarily used for
instant messaging (such as chat).
"""
interface Room {
    id: ID!
    name: String!
}
type ChatRoom implements Room {
    id: ID!
    name: String!
    # messages(limit: Int): [Message]!
}

"""An attachment on a post."""
type Attachment {
    url: String!
    downloadUrl: String
    mimeType: String!
    downloadMimeType: String
    filename: String!
    yours: Boolean!
    snowflake: String!
}

# ===========
# Input Types
# ===========
input UpdatedSettings {
    """Whether to allow registration."""
    registrationEnabled: Boolean
    """Whether or not to only add to the allowHostnames field."""
    patchAllowHostnames: Boolean
    """
    The hostnames to allow to CNAME to this server.
    Domains that are allowed here and do this will bear that domain
    to users who sign up there.
    """
    allowHostnames: [String!]!
}

# =============
# Utility types
# =============
"""
ISO-8601 formatted date and time.
"""
scalar Date
"""
An arbitrary key-value dictionary.
"""
scalar Dict
"""The type of link used in a LinkContent."""
enum LinkType {
    """The link is a Content or Flow on Aqua."""
    share
    """The link is to a remote image or video."""
    media
    """The link is a link to a Web site."""
    web
}
"""
AlbumEntries are used in ImageContent.
"""
type AlbumEntry {
    """The URL of the image."""
    url: String!
    """
    The Markdown caption of the image. 
    No block elements are supported.
    """
    caption: String
}
type SystemInfo {
    """
    The version of gridless this is running on.
    """
    version: String!
    """
    The name of the gridless server.
    """
    name: String!
}

# =============
# Query Helpers
# =============
type GetUserResponse {
    error: Error
    data: User
}