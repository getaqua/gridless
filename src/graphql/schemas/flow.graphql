type Query {
    """
    Get a Flow. Returns null/None if it doesn't exist,
    or if you don't have permission to access it.
    """
    getFlow(id: String!): Flow
    """Get a list of the Flows you follow or subscribe to."""
    getFollowedFlows: [Flow!]
    """Get a list of the Flows you are a member of."""
    getJoinedFlows: [Flow!]
}
type Mutation {
    """
    Creates a Flow, returning null if it fails
    and the new Flow if it succeeds.
    
    Sets the user's Flow as its parent by default.
    """
    createFlow(flow: NewFlow!, parentId: String): Flow
    """Updates a Flow, returning null if it fails
    and the updated Flow if it succeeds."""
    updateFlow(id: String!, data: PatchedFlow!): Flow
    """Joins a Flow, returning null if it fails 
    and the joined Flow if it succeeds."""
    joinFlow(id: String!, inviteCode: String): Flow
    """Deletes a Flow, returning false if it fails
    and true if it succeeds."""
    deleteFlow(id: String!): Boolean!
    """Leaves a Flow, returning false if it fails
    and true if it succeeds."""
    leaveFlow(id: String!): Boolean!
    """Follow or subscribe to a Flow, returning false if it fails
    and true if it succeeds."""
    followFlow(id: String!): Boolean!
    """Unfollow or unsubscribe to a Flow, returning false if it fails
    and true if it succeeds."""
    unfollowFlow(id: String!): Boolean!
}

"""
A Flow is a collection of Members, Content, and Rooms,
along with access controls, badges, and posting as the Flow.
"""
type Flow implements FlowEntity {
    name: String!
    avatarUrl: String
    "Banners display above or behind the name and/or avatar of the Flow."
    bannerUrl: String
    "Taglines are 64 characters or less, and are often displayed above the description."
    tagline: String
    description: String
    id: ID!
    snowflake: String!
    # Coming soon, maybe: display settings, and such
    publicPermissions: FlowPermissions!
    joinedPermissions: FlowPermissions!
    #badges: Badge
    owner: PartialFlow!
    parent: Flow
    isJoined: Boolean!
    isFollowing: Boolean!
    members(limit: Int): [FlowMember!]
    memberCount: Int!
    content(limit: Int): [Content!]
    effectivePermissions(for: String): FlowPermissions!
    displayFlags: [String!]!
}
type PartialFlow {
    id: String!
    snowflake: String!
}
"""Used in the creation of new Flows."""
input NewFlow {
    """The name of the Flow to create."""
    name: String!
    """
    The **user-configurable** part of the ID.
    It's equivalent to a username.
    Does not include `//`.
    """
    id: String!
    """
    Presets that are used to generate default settings for the Flow.
    """
    preset: FlowPreset!
    """
    The description, topic, or biography of the Flow.
    """
    description: String
    """
    The avatar or profile picture for the Flow.
    """
    avatarUrl: String
}
input PatchedFlow {
    """The Flow's name."""
    name: String
    """The Flow's description."""
    description: String
    """The avatar or profile picture for the Flow."""
    avatarUrl: String
    "Banners display above or behind the name and/or avatar of the Flow."
    bannerUrl: String
    "Taglines are 64 characters or less, and are often displayed above the description."
    tagline: String
    """Permissions for users who have not joined the Flow.
    Permissions given will be patched on top of the existing permissions."""
    publicPermissions: UpdatedFlowPermissions
    """Default permissions for users who _have_ joined the Flow.
    Permissions given will be patched on top of the existing permissions."""
    joinedPermissions: UpdatedFlowPermissions
}
"""
A preset with which to configure a Flow's initial settings.
"""
enum FlowPreset {
    """Anyone can read, post, and join. Can optionally require approval. Comparable to a subreddit."""
    community
    """An invite-only group."""
    private_group
    """Similar to "stories" on other platforms."""
    story
    """
    All users post anonymously (under the group's name) by default.
    Viewing is public. Joining and posting are invite-only.
    """
    channel
    """An invite-only group where members post anonymously by default."""
    anonymous_group
    """
    Blog Flows have a blog- or news-like home page. 
    Viewing is public. Joining and posting are invite-only.
    """
    blog
    """A private collection, group, or list."""
    collection
}
"""
A Badge, as seen in Flows. Badges can have permission overrides in Flows,
and have a name, and optional description, color, and importance.
"""
type Badge {
    id: ID!
    name: String!
    description: String
    color: String
    important: Boolean
}
enum AllowDeny {
    allow
    deny
    request
    force
}
type FlowPermissions {
    """
    Whether a user can join the Flow. 
    Only applicable for publicPermissions.
    """
    join: AllowDeny
    """Whether the user can post Content to this Flow."""
    post: AllowDeny
    """Whether the user can read Content posted to this Flow."""
    read: AllowDeny
    """Whether the user can see the profile information of this Flow,
    such as:
    * Name
    * Profile picture
    * Bio/about me
    * Banner
    """
    view: AllowDeny
    """
    Whether the user can delete Content posted to this Flow.
    The owner inherently has this permission set to `allow`.
    """
    delete: AllowDeny
    """Whether the user can pin Content in this Flow."""
    pin: AllowDeny
    """
    Whether the user can update details and settings for the Flow,
    such as its name, profile picture, and description.
    """
    update: AllowDeny
    """Whether the user can post anonymously in the Flow."""
    anonymous: AllowDeny
}
input UpdatedFlowPermissions {
    join: AllowDeny
    post: AllowDeny
    read: AllowDeny
    view: AllowDeny
    delete: AllowDeny
    pin: AllowDeny
    update: AllowDeny
    anonymous: AllowDeny
}

"""Flags regarding a Flow."""
enum FlowFlag {
    """
    The Flow is owned by a user sharing its ID, 
    so it is marked as owning itself.
    """
    IS_PROFILE
    """
    The Flow is the profile of a system administrator.
    Show the blue and red Aqua Admin badge on the client.
    """
    IS_SYSADMIN
    """
    The Flow is the Special Story Flow for its owner.
    This flag is used in lookups for Special flows
    or the owner's Story flow.
    This Flow's owner must have the IS_PROFILE flag.
    """
    IS_USER_STORY
}
"""All Features available for Flows."""
enum FlowFeature {
    """The Flow contains Content."""
    Content
    """The Flow uses Likes and Dislikes.
    Mutually exclusive with Like and Rating."""
    LikeDislike
    """The Flow uses Likes.
    Mutually exclusive with LikeDislike and Rating."""
    Like
    """The Flow uses a five-star rating system for Content.
    Mutually exclusive with LikeDislike and Like."""
    Rating
    """
    Users with effective Read permission
    can react to posts with emoji.
    """
    Reactions
}